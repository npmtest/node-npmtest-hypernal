{"/home/travis/build/npmtest/node-npmtest-hypernal/test.js":"/* istanbul instrument in package npmtest_hypernal */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-hypernal/lib.npmtest_hypernal.js":"/* istanbul instrument in package npmtest_hypernal */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_hypernal = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_hypernal = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-hypernal/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-hypernal && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_hypernal */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_hypernal\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_hypernal.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_hypernal.rollup.js'] =\n            local.assetsDict['/assets.npmtest_hypernal.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_hypernal.__dirname + '/lib.npmtest_hypernal.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-hypernal/node_modules/hypernal/index.js":"'use strict';\n\nvar Terminal = require('./term')\n  , through = require('through')\n  ;\n\nfunction style(parentElem) {\n  var currentStyle = parentElem.getAttribute('style') || '';\n  // TODO: make white-space work\n  // white-space: pre has the following problem:\n  // If applied before the terminal is visible, things break horribly \n  // to the point that the output is either shifted to the left or not visible at all.\n  // (at least for hyperwatch, to repro: -- npm install hyperwatch; npm explore hyperwatch; npm run demo; ) \n  //  - most likely due to the fact that hyperwatch is positioned absolute\n  //\n  // However when this style is set after the parent element became visible, it works fine.\n  parentElem.setAttribute('style', currentStyle + 'overflow-y: auto; /* white-space: pre; */');\n}\n\nfunction scroll(elem) {\n  if (!elem) return;\n  elem.scrollTop = elem.scrollHeight;\n}\n\nmodule.exports = function (opts) {\n  var term = new Terminal(opts);\n  term.open();\n  \n  var hypernal = through(term.write.bind(term));\n  hypernal.appendTo = function (parent) {\n    if (typeof parent === 'string') parent = document.querySelector(parent);\n\n    parent.appendChild(term.element);\n    style(parent);\n    hypernal.container = parent;\n    term.element.style.position = 'relative';\n  };\n\n  hypernal.writeln = function (line) {\n    term.writeln(line);\n    if (hypernal.tail) scroll(hypernal.container);\n  };\n\n  hypernal.write = function (data) {\n    term.write(data);\n    if (hypernal.tail) scroll(hypernal.container);\n  };\n\n  // convenience shortcuts\n  hypernal.reset   =  term.reset.bind(term);\n  hypernal.element =  term.element;\n\n  // the underlying term for all other needs\n  hypernal.term = term;\n\n  return hypernal;\n};\n","/home/travis/build/npmtest/node-npmtest-hypernal/node_modules/hypernal/term.js":"'use strict';\n\nvar states = require('./lib/states');\n\nmodule.exports = Terminal;\n\nfunction Terminal(opts) {\n  opts = opts || {};\n  if (!(this instanceof Terminal)) return new Terminal(opts);\n\n  this.cols = opts.cols || 500;\n  this.rows = opts.rows || 100;\n\n  this.ybase = 0;\n  this.ydisp = 0;\n  this.x = 0;\n  this.y = 0;\n  this.cursorState = 0;\n  this.cursorHidden = false;\n  this.convertEol = false;\n  this.state = states.normal;\n  this.queue = '';\n  this.scrollTop = 0;\n  this.scrollBottom = this.rows - 1;\n\n  // modes\n  this.applicationKeypad = false;\n  this.originMode = false;\n  this.insertMode = false;\n  this.wraparoundMode = false;\n  this.normal = null;\n\n  // charset\n  this.charset = null;\n  this.gcharset = null;\n  this.glevel = 0;\n  this.charsets = [null];\n\n  // misc\n  this.element;\n  this.children;\n  this.refreshStart;\n  this.refreshEnd;\n  this.savedX;\n  this.savedY;\n  this.savedCols;\n\n  // stream\n  this.readable = true;\n  this.writable = true;\n\n  this.defAttr = (257 << 9) | 256;\n  this.curAttr = this.defAttr;\n\n  this.params = [];\n  this.currentParam = 0;\n  this.prefix = '';\n  this.postfix = '';\n\n  this.lines = [];\n  var i = this.rows;\n  while (i--) {\n      this.lines.push(this.blankLine());\n  }\n\n  this.tabs;\n  this.setupStops();\n}\n\nrequire('./lib/colors')(Terminal);\nrequire('./lib/options')(Terminal);\n\nrequire('./lib/open')(Terminal);\nrequire('./lib/destroy')(Terminal);\nrequire('./lib/refresh')(Terminal);\n\nrequire('./lib/write')(Terminal);\n\nrequire('./lib/setgLevel');\nrequire('./lib/setgCharset');\n\nrequire('./lib/debug')(Terminal);\n\nrequire('./lib/stops')(Terminal);\n\nrequire('./lib/erase')(Terminal);\nrequire('./lib/blankLine')(Terminal);\nrequire('./lib/range')(Terminal);\nrequire('./lib/util')(Terminal);\n\nrequire('./lib/esc/index.js')(Terminal);\nrequire('./lib/esc/reset.js')(Terminal);\nrequire('./lib/esc/tabSet.js')(Terminal);\n\nrequire('./lib/csi/charAttributes')(Terminal);\nrequire('./lib/csi/insert-delete')(Terminal);\nrequire('./lib/csi/position')(Terminal);\nrequire('./lib/csi/cursor')(Terminal);\nrequire('./lib/csi/repeatPrecedingCharacter')(Terminal);\nrequire('./lib/csi/tabClear')(Terminal);\nrequire('./lib/csi/softReset')(Terminal);\n\nrequire('./lib/charsets.js')(Terminal);\n","/home/travis/build/npmtest/node-npmtest-hypernal/node_modules/hypernal/lib/states.js":"'use strict';\n\nmodule.exports = {\n    normal  :  0\n  , escaped :  1\n  , csi     :  2\n  , osc     :  3\n  , charset :  4\n  , dcs     :  5\n  , ignore  :  6\n};\n","/home/travis/build/npmtest/node-npmtest-hypernal/node_modules/hypernal/lib/colors.js":"'use strict';\n\nmodule.exports = function (Terminal) {\n\n  // Colors 0-15\n  Terminal.colors = [\n  // dark:\n  '#2e3436', '#cc0000', '#4e9a06', '#c4a000', '#3465a4', '#75507b', '#06989a', '#d3d7cf',\n  // bright:\n  '#555753', '#ef2929', '#8ae234', '#fce94f', '#729fcf', '#ad7fa8', '#34e2e2', '#eeeeec'];\n\n  // Colors 16-255\n  // Much thanks to TooTallNate for writing this.\n  Terminal.colors = (function() {\n    var colors = Terminal.colors,\n      r = [0x00, 0x5f, 0x87, 0xaf, 0xd7, 0xff],\n      i;\n\n    // 16-231\n    i = 0;\n    for (; i < 216; i++) {\n      out(r[(i / 36) % 6 | 0], r[(i / 6) % 6 | 0], r[i % 6]);\n    }\n\n    // 232-255 (grey)\n    i = 0;\n    for (; i < 24; i++) {\n      r = 8 + i * 10;\n      out(r, r, r);\n    }\n\n    function out(r, g, b) {\n      colors.push('#' + hex(r) + hex(g) + hex(b));\n    }\n\n    function hex(c) {\n      c = c.toString(16);\n      return c.length < 2 ? '0' + c : c;\n    }\n\n    return colors;\n  })();\n\n  // Default BG/FG\n  Terminal.defaultColors = {\n    bg: '#000000',\n    fg: '#f0f0f0'\n  };\n\n  Terminal.colors[256] = Terminal.defaultColors.bg;\n  Terminal.colors[257] = Terminal.defaultColors.fg;\n};\n","/home/travis/build/npmtest/node-npmtest-hypernal/node_modules/hypernal/lib/options.js":"'use strict';\n\nmodule.exports = function (Terminal) {\n  Terminal.termName        =  'xterm';\n  Terminal.geometry        =  [80, 24];\n  Terminal.cursorBlink     =  true;\n  Terminal.visualBell      =  false;\n  Terminal.popOnBell       =  false;\n  Terminal.scrollback      =  1000;\n  Terminal.screenKeys      =  false;\n  Terminal.programFeatures =  false;\n  Terminal.debug           =  false;\n};\n","/home/travis/build/npmtest/node-npmtest-hypernal/node_modules/hypernal/lib/open.js":"'use strict';\n\n// if bold is broken, we can't\n// use it in the terminal.\nfunction isBoldBroken() {\n    var el = document.createElement('span');\n    el.innerHTML = 'hello world';\n    document.body.appendChild(el);\n    var w1 = el.scrollWidth;\n    el.style.fontWeight = 'bold';\n    var w2 = el.scrollWidth;\n    document.body.removeChild(el);\n    return w1 !== w2;\n}\n\nmodule.exports = function (Terminal) {\n  /**\n  * Open Terminal\n  */\n\n  Terminal.prototype.open = function() {\n    var self = this,\n      i = 0,\n      div;\n\n    this.element = document.createElement('div');\n    this.element.className = 'terminal';\n    this.children = [];\n\n    for (; i < this.rows; i++) {\n      div = document.createElement('div');\n      this.element.appendChild(div);\n      this.children.push(div);\n    }\n\n    this.refresh(0, this.rows - 1);\n\n    // XXX - hack, move this somewhere else.\n    if (Terminal.brokenBold === null) {\n      Terminal.brokenBold = isBoldBroken();\n    }\n\n    // sync default bg/fg colors\n    this.element.style.backgroundColor = Terminal.defaultColors.bg;\n    this.element.style.color = Terminal.defaultColors.fg;\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-hypernal/node_modules/hypernal/lib/destroy.js":"'use strict';\n\nmodule.exports = function (Terminal) { \n  Terminal.prototype.destroy = function() {\n    this.readable = false;\n    this.writable = false;\n    this._events = {};\n    this.handler = function() {};\n    this.write = function() {};\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-hypernal/node_modules/hypernal/lib/refresh.js":"'use strict';\n\nmodule.exports = function (Terminal) {\n\n  /**\n  * Rendering Engine\n  */\n\n  // In the screen buffer, each character\n  // is stored as a an array with a character\n  // and a 32-bit integer.\n  // First value: a utf-16 character.\n  // Second value:\n  // Next 9 bits: background color (0-511).\n  // Next 9 bits: foreground color (0-511).\n  // Next 14 bits: a mask for misc. flags:\n  // 1=bold, 2=underline, 4=inverse\n\n  Terminal.prototype.refresh = function(start, end) {\n    var x, y, i, line, out, ch, width, data, attr, fgColor, bgColor, flags, row, parent;\n\n    \n    width = this.cols;\n    y = start;\n\n    for (; y <= end; y++) {\n      row = y + this.ydisp;\n\n      line = this.lines[row];\n      if (!line) {\n        // simple solution in case we have more lines than rows\n        // could be improved to instead remove first line (and related html element)\n        return this.reset();\n      }\n\n      out = '';\n\n      if (y === this.y && this.cursorState && this.ydisp === this.ybase && !this.cursorHidden) {\n        x = this.x;\n      } else {\n        x = -1;\n      }\n\n      attr = this.defAttr;\n      i = 0;\n\n      for (; i < width; i++) {\n        data = line[i][0];\n        ch = line[i][1];\n\n        if (i === x) data = -1;\n\n        if (data !== attr) {\n          if (attr !== this.defAttr) {\n            out += '</span>';\n          }\n          if (data !== this.defAttr) {\n            if (data === -1) {\n              out += '<span class=\"reverse-video\">';\n            } else {\n              out += '<span style=\"';\n\n              bgColor = data & 0x1ff;\n              fgColor = (data >> 9) & 0x1ff;\n              flags = data >> 18;\n\n              if (flags & 1) {\n                if (!Terminal.brokenBold) {\n                  out += 'font-weight:bold;';\n                }\n                // see: XTerm*boldColors\n                if (fgColor < 8) fgColor += 8;\n              }\n\n              if (flags & 2) {\n                out += 'text-decoration:underline;';\n              }\n\n              if (bgColor !== 256) {\n                out += 'background-color:' + Terminal.colors[bgColor] + ';';\n              }\n\n              if (fgColor !== 257) {\n                out += 'color:' + Terminal.colors[fgColor] + ';';\n              }\n\n              out += '\">';\n            }\n          }\n        }\n\n        switch (ch) {\n        case '&':\n          out += '&';\n          break;\n        case '<':\n          out += '<';\n          break;\n        case '>':\n          out += '>';\n          break;\n        default:\n          if (ch <= ' ') {\n            out += ' ';\n          } else {\n            out += ch;\n          }\n          break;\n        }\n\n        attr = data;\n      }\n\n      if (attr !== this.defAttr) {\n        out += '</span>';\n      }\n\n      this.children[y].innerHTML = out;\n    }\n\n    if (parent) parent.appendChild(this.element);\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-hypernal/node_modules/hypernal/lib/write.js":"'use strict';\n\nvar states = require('./states');\n\nfunction fixLinefeed(data) {\n  return data.replace(/([^\\r])\\n/g, '$1\\r\\n');\n}\n\nfunction fixIndent(data) {\n  if (!/(^|\\n) /.test(data)) return data;\n\n  // not very efficient, but works and would only become a problem\n  // once we render huge amounts of data\n  return data\n    .split('\\n')\n    .map(function (line) {\n      var count = 0;\n      while(line.charAt(0) === ' '){\n        line = line.slice(1);\n        count++;\n      }\n      while(count--) {\n        line = '&nbsp;' + line;\n      }\n      return line;\n    })\n    .join('\\r\\n');\n}\n\nmodule.exports = function(Terminal) {\n\n  Terminal.prototype.bell = function() {\n    var snd = new Audio(\"bell.wav\"); // buffers automatically when created\n    snd.play();\n\n    if (!Terminal.visualBell) return;\n    var self = this;\n    this.element.style.borderColor = 'white';\n    setTimeout(function() {\n      self.element.style.borderColor = '';\n    }, 10);\n    if (Terminal.popOnBell) this.focus();\n  };\n\n  Terminal.prototype.write = function(data) {\n\n    data = fixLinefeed(data);\n    data = fixIndent(data);\n\n    var l = data.length,\n      i = 0,\n      cs, ch;\n\n    this.refreshStart = this.y;\n    this.refreshEnd = this.y;\n\n    if (this.ybase !== this.ydisp) {\n      this.ydisp = this.ybase;\n      this.maxRange();\n    }\n\n    // this.log(JSON.stringify(data.replace(/\\x1b/g, '^[')));\n\n    for (; i < l; i++) {\n      ch = data[i];\n      switch (this.state) {\n      case states.normal:\n        switch (ch) {\n          // '\\0'\n          // case '\\0':\n          // break;\n\n          // '\\a'\n        case '\\x07':\n          this.bell();\n          break;\n\n          // '\\n', '\\v', '\\f'\n        case '\\n':\n        case '\\x0b':\n        case '\\x0c':\n          if (this.convertEol) {\n            this.x = 0;\n          }\n          this.y++;\n          break;\n\n          // '\\r'\n        case '\\r':\n          this.x = 0;\n          break;\n\n          // '\\b'\n        case '\\x08':\n          if (this.x > 0) {\n            this.x--;\n          }\n          break;\n\n          // '\\t'\n        case '\\t':\n          this.x = this.nextStop();\n          break;\n\n          // shift out\n        case '\\x0e':\n          this.setgLevel(1);\n          break;\n\n          // shift in\n        case '\\x0f':\n          this.setgLevel(0);\n          break;\n\n          // '\\e'\n        case '\\x1b':\n          this.state = states.escaped;\n          break;\n\n        default:\n          // ' '\n          if (ch >= ' ') {\n            if (this.charset && this.charset[ch]) {\n              ch = this.charset[ch];\n            }\n            if (this.x >= this.cols) {\n              this.x = 0;\n              this.y++;\n            }\n\n            // FIXME: this prevents errors from being thrown, but needs a proper fix\n            if (this.lines[this.y + this.ybase])\n              this.lines[this.y + this.ybase][this.x] = [this.curAttr, ch];\n\n            this.x++;\n            this.updateRange(this.y);\n          }\n          break;\n        }\n        break;\n      case states.escaped:\n        switch (ch) {\n          // ESC [ Control Sequence Introducer ( CSI is 0x9b).\n        case '[':\n          this.params = [];\n          this.currentParam = 0;\n          this.state = states.csi;\n          break;\n\n          // ESC ] Operating System Command ( OSC is 0x9d).\n        case ']':\n          this.params = [];\n          this.currentParam = 0;\n          this.state = states.osc;\n          break;\n\n          // ESC P Device Control String ( DCS is 0x90).\n        case 'P':\n          this.params = [];\n          this.currentParam = 0;\n          this.state = states.dcs;\n          break;\n\n          // ESC _ Application Program Command ( APC is 0x9f).\n        case '_':\n          this.stateType = 'apc';\n          this.state = states.ignore;\n          break;\n\n          // ESC ^ Privacy Message ( PM is 0x9e).\n        case '^':\n          this.stateType = 'pm';\n          this.state = states.ignore;\n          break;\n\n          // ESC c Full Reset (RIS).\n        case 'c':\n          this.reset();\n          break;\n\n          // ESC E Next Line ( NEL is 0x85).\n          // ESC D Index ( IND is 0x84).\n        case 'E':\n          this.x = 0;\n          break;\n        case 'D':\n          this.index();\n          break;\n\n          // ESC M Reverse Index ( RI is 0x8d).\n        case 'M':\n          this.reverseIndex();\n          break;\n\n          // ESC % Select default/utf-8 character set.\n          // @ = default, G = utf-8\n        case '%':\n          //this.charset = null;\n          this.setgLevel(0);\n          this.setgCharset(0, Terminal.charsets.US);\n          this.state = states.normal;\n          i++;\n          break;\n\n          // ESC (,),*,+,-,. Designate G0-G2 Character Set.\n        case '(':\n          // <-- this seems to get all the attention\n        case ')':\n        case '*':\n        case '+':\n        case '-':\n        case '.':\n          switch (ch) {\n          case '(':\n            this.gcharset = 0;\n            break;\n          case ')':\n            this.gcharset = 1;\n            break;\n          case '*':\n            this.gcharset = 2;\n            break;\n          case '+':\n            this.gcharset = 3;\n            break;\n          case '-':\n            this.gcharset = 1;\n            break;\n          case '.':\n            this.gcharset = 2;\n            break;\n          }\n          this.state = states.charset;\n          break;\n\n          // Designate G3 Character Set (VT300).\n          // A = ISO Latin-1 Supplemental.\n          // Not implemented.\n        case '/':\n          this.gcharset = 3;\n          this.state = states.charset;\n          i--;\n          break;\n\n          // ESC N\n          // Single Shift Select of G2 Character Set\n          // ( SS2 is 0x8e). This affects next character only.\n        case 'N':\n          break;\n          // ESC O\n          // Single Shift Select of G3 Character Set\n          // ( SS3 is 0x8f). This affects next character only.\n        case 'O':\n          break;\n          // ESC n\n          // Invoke the G2 Character Set as GL (LS2).\n        case 'n':\n          this.setgLevel(2);\n          break;\n          // ESC o\n          // Invoke the G3 Character Set as GL (LS3).\n        case 'o':\n          this.setgLevel(3);\n          break;\n          // ESC |\n          // Invoke the G3 Character Set as GR (LS3R).\n        case '|':\n          this.setgLevel(3);\n          break;\n          // ESC }\n          // Invoke the G2 Character Set as GR (LS2R).\n        case '}':\n          this.setgLevel(2);\n          break;\n          // ESC ~\n          // Invoke the G1 Character Set as GR (LS1R).\n        case '~':\n          this.setgLevel(1);\n          break;\n\n          // ESC 7 Save Cursor (DECSC).\n        case '7':\n          this.saveCursor();\n          this.state = states.normal;\n          break;\n\n          // ESC 8 Restore Cursor (DECRC).\n        case '8':\n          this.restoreCursor();\n          this.state = states.normal;\n          break;\n\n          // ESC # 3 DEC line height/width\n        case '#':\n          this.state = states.normal;\n          i++;\n          break;\n\n          // ESC H Tab Set (HTS is 0x88).\n        case 'H':\n          this.tabSet();\n          break;\n\n          // ESC = Application Keypad (DECPAM).\n        case '=':\n          this.log('Serial port requested application keypad.');\n          this.applicationKeypad = true;\n          this.state = states.normal;\n          break;\n\n          // ESC > Normal Keypad (DECPNM).\n        case '>':\n          this.log('Switching back to normal keypad.');\n          this.applicationKeypad = false;\n          this.state = states.normal;\n          break;\n\n        default:\n          this.state = states.normal;\n          this.error('Unknown ESC control: %s.', ch);\n          break;\n        }\n        break;\n\n      case states.charset:\n        switch (ch) {\n        case '0':\n          // DEC Special Character and Line Drawing Set.\n          cs = Terminal.charsets.SCLD;\n          break;\n        case 'A':\n          // UK\n          cs = Terminal.charsets.UK;\n          break;\n        case 'B':\n          // United States (USASCII).\n          cs = Terminal.charsets.US;\n          break;\n        case '4':\n          // Dutch\n          cs = Terminal.charsets.Dutch;\n          break;\n        case 'C':\n          // Finnish\n        case '5':\n          cs = Terminal.charsets.Finnish;\n          break;\n        case 'R':\n          // French\n          cs = Terminal.charsets.French;\n          break;\n        case 'Q':\n          // FrenchCanadian\n          cs = Terminal.charsets.FrenchCanadian;\n          break;\n        case 'K':\n          // German\n          cs = Terminal.charsets.German;\n          break;\n        case 'Y':\n          // Italian\n          cs = Terminal.charsets.Italian;\n          break;\n        case 'E':\n          // NorwegianDanish\n        case '6':\n          cs = Terminal.charsets.NorwegianDanish;\n          break;\n        case 'Z':\n          // Spanish\n          cs = Terminal.charsets.Spanish;\n          break;\n        case 'H':\n          // Swedish\n        case '7':\n          cs = Terminal.charsets.Swedish;\n          break;\n        case '=':\n          // Swiss\n          cs = Terminal.charsets.Swiss;\n          break;\n        case '/':\n          // ISOLatin (actually /A)\n          cs = Terminal.charsets.ISOLatin;\n          i++;\n          break;\n        default:\n          // Default\n          cs = Terminal.charsets.US;\n          break;\n        }\n        this.setgCharset(this.gcharset, cs);\n        this.gcharset = null;\n        this.state = states.normal;\n        break;\n\n      case states.osc:\n        // OSC Ps ; Pt ST\n        // OSC Ps ; Pt BEL\n        // Set Text Parameters.\n        if (ch === '\\x1b' || ch === '\\x07') {\n          if (ch === '\\x1b') i++;\n\n          this.params.push(this.currentParam);\n\n          switch (this.params[0]) {\n          case 0:\n          case 1:\n          case 2:\n            if (this.params[1]) {\n              this.title = this.params[1];\n\n              //handlers could not be installed\n              if (this.handleTitle) {\n                this.handleTitle(this.title);\n              }\n\n            }\n            break;\n          case 3:\n            // set X property\n            break;\n          case 4:\n          case 5:\n            // change dynamic colors\n            break;\n          case 10:\n          case 11:\n          case 12:\n          case 13:\n          case 14:\n          case 15:\n          case 16:\n          case 17:\n          case 18:\n          case 19:\n            // change dynamic ui colors\n            break;\n          case 46:\n            // change log file\n            break;\n          case 50:\n            // dynamic font\n            break;\n          case 51:\n            // emacs shell\n            break;\n          case 52:\n            // manipulate selection data\n            break;\n          case 104:\n          case 105:\n          case 110:\n          case 111:\n          case 112:\n          case 113:\n          case 114:\n          case 115:\n          case 116:\n          case 117:\n          case 118:\n            // reset colors\n            break;\n          }\n\n          this.params = [];\n          this.currentParam = 0;\n          this.state = states.normal;\n        } else {\n          if (!this.params.length) {\n            if (ch >= '0' && ch <= '9') {\n              this.currentParam = this.currentParam * 10 + ch.charCodeAt(0) - 48;\n            } else if (ch === ';') {\n              this.params.push(this.currentParam);\n              this.currentParam = '';\n            }\n          } else {\n            this.currentParam += ch;\n          }\n        }\n        break;\n\n      case states.csi:\n        // '?', '>', '!'\n        if (ch === '?' || ch === '>' || ch === '!') {\n          this.prefix = ch;\n          break;\n        }\n\n        // 0 - 9\n        if (ch >= '0' && ch <= '9') {\n          this.currentParam = this.currentParam * 10 + ch.charCodeAt(0) - 48;\n          break;\n        }\n\n        // '$', '\"', ' ', '\\''\n        if (ch === '$' || ch === '\"' || ch === ' ' || ch === '\\'') {\n          this.postfix = ch;\n          break;\n        }\n\n        this.params.push(this.currentParam);\n        this.currentParam = 0;\n\n        // ';'\n        if (ch === ';') break;\n\n        this.state = states.normal;\n\n        switch (ch) {\n          // CSI Ps A\n          // Cursor Up Ps Times (default = 1) (CUU).\n        case 'A':\n          this.cursorUp(this.params);\n          break;\n\n          // CSI Ps B\n          // Cursor Down Ps Times (default = 1) (CUD).\n        case 'B':\n          this.cursorDown(this.params);\n          break;\n\n          // CSI Ps C\n          // Cursor Forward Ps Times (default = 1) (CUF).\n        case 'C':\n          this.cursorForward(this.params);\n          break;\n\n          // CSI Ps D\n          // Cursor Backward Ps Times (default = 1) (CUB).\n        case 'D':\n          this.cursorBackward(this.params);\n          break;\n\n          // CSI Ps ; Ps H\n          // Cursor Position [row;column] (default = [1,1]) (CUP).\n        case 'H':\n          this.cursorPos(this.params);\n          break;\n\n          // CSI Ps J Erase in Display (ED).\n        case 'J':\n          this.eraseInDisplay(this.params);\n          break;\n\n          // CSI Ps K Erase in Line (EL).\n        case 'K':\n          this.eraseInLine(this.params);\n          break;\n\n          // CSI Pm m Character Attributes (SGR).\n        case 'm':\n          this.charAttributes(this.params);\n          break;\n\n          // CSI Ps n Device Status Report (DSR).\n        case 'n':\n          this.deviceStatus(this.params);\n          break;\n\n          /**\n          * Additions\n          */\n\n          // CSI Ps @\n          // Insert Ps (Blank) Character(s) (default = 1) (ICH).\n        case '@':\n          this.insertChars(this.params);\n          break;\n\n          // CSI Ps E\n          // Cursor Next Line Ps Times (default = 1) (CNL).\n        case 'E':\n          this.cursorNextLine(this.params);\n          break;\n\n          // CSI Ps F\n          // Cursor Preceding Line Ps Times (default = 1) (CNL).\n        case 'F':\n          this.cursorPrecedingLine(this.params);\n          break;\n\n          // CSI Ps G\n          // Cursor Character Absolute [column] (default = [row,1]) (CHA).\n        case 'G':\n          this.cursorCharAbsolute(this.params);\n          break;\n\n          // CSI Ps L\n          // Insert Ps Line(s) (default = 1) (IL).\n        case 'L':\n          this.insertLines(this.params);\n          break;\n\n          // CSI Ps M\n          // Delete Ps Line(s) (default = 1) (DL).\n        case 'M':\n          this.deleteLines(this.params);\n          break;\n\n          // CSI Ps P\n          // Delete Ps Character(s) (default = 1) (DCH).\n        case 'P':\n          this.deleteChars(this.params);\n          break;\n\n          // CSI Ps X\n          // Erase Ps Character(s) (default = 1) (ECH).\n        case 'X':\n          this.eraseChars(this.params);\n          break;\n\n          // CSI Pm ` Character Position Absolute\n          // [column] (default = [row,1]) (HPA).\n        case '`':\n          this.charPosAbsolute(this.params);\n          break;\n\n          // 141 61 a * HPR -\n          // Horizontal Position Relative\n        case 'a':\n          this.HPositionRelative(this.params);\n          break;\n\n          // CSI P s c\n          // Send Device Attributes (Primary DA).\n          // CSI > P s c\n          // Send Device Attributes (Secondary DA)\n        case 'c':\n          //- this.sendDeviceAttributes(this.params);\n          break;\n\n          // CSI Pm d\n          // Line Position Absolute [row] (default = [1,column]) (VPA).\n        case 'd':\n          this.linePosAbsolute(this.params);\n          break;\n\n          // 145 65 e * VPR - Vertical Position Relative\n        case 'e':\n          this.VPositionRelative(this.params);\n          break;\n\n          // CSI Ps ; Ps f\n          // Horizontal and Vertical Position [row;column] (default =\n          // [1,1]) (HVP).\n        case 'f':\n          this.HVPosition(this.params);\n          break;\n\n          // CSI Pm h Set Mode (SM).\n          // CSI ? Pm h - mouse escape codes, cursor escape codes\n        case 'h':\n          //- this.setMode(this.params);\n          break;\n\n          // CSI Pm l Reset Mode (RM).\n          // CSI ? Pm l\n        case 'l':\n          //- this.resetMode(this.params);\n          break;\n\n          // CSI Ps ; Ps r\n          // Set Scrolling Region [top;bottom] (default = full size of win-\n          // dow) (DECSTBM).\n          // CSI ? Pm r\n        case 'r':\n          //- this.setScrollRegion(this.params);\n          break;\n\n          // CSI s\n          // Save cursor (ANSI.SYS).\n        case 's':\n          this.saveCursor(this.params);\n          break;\n\n          // CSI u\n          // Restore cursor (ANSI.SYS).\n        case 'u':\n          this.restoreCursor(this.params);\n          break;\n\n          /**\n          * Lesser Used\n          */\n\n          // CSI Ps I\n          // Cursor Forward Tabulation Ps tab stops (default = 1) (CHT).\n        case 'I':\n          this.cursorForwardTab(this.params);\n          break;\n\n          // CSI Ps S Scroll up Ps lines (default = 1) (SU).\n        case 'S':\n          //- this.scrollUp(this.params);\n          break;\n\n          // CSI Ps T Scroll down Ps lines (default = 1) (SD).\n          // CSI Ps ; Ps ; Ps ; Ps ; Ps T\n          // CSI > Ps; Ps T\n        case 'T':\n          if (this.params.length < 2 && !this.prefix) {\n            //- this.scrollDown(this.params);\n          }\n          break;\n\n          // CSI Ps Z\n          // Cursor Backward Tabulation Ps tab stops (default = 1) (CBT).\n        case 'Z':\n          this.cursorBackwardTab(this.params);\n          break;\n\n          // CSI Ps b Repeat the preceding graphic character Ps times (REP).\n        case 'b':\n          this.repeatPrecedingCharacter(this.params);\n          break;\n\n          // CSI Ps g Tab Clear (TBC).\n        case 'g':\n          this.tabClear(this.params);\n          break;\n        case 'p':\n          switch (this.prefix) {\n          case '!':\n            this.softReset(this.params);\n            break;\n          }\n          break;\n\n        default:\n          this.error('Unknown CSI code: %s.', ch);\n          break;\n        }\n\n        this.prefix = '';\n        this.postfix = '';\n        break;\n\n      case states.dcs:\n        if (ch === '\\x1b' || ch === '\\x07') {\n          if (ch === '\\x1b') i++;\n\n          switch (this.prefix) {\n            // User-Defined Keys (DECUDK).\n          case '':\n            break;\n\n            // Request Status String (DECRQSS).\n            // test: echo -e '\\eP$q\"p\\e\\\\'\n          case '$q':\n            var pt = this.currentParam,\n              valid = false;\n\n            switch (pt) {\n              // DECSCA\n            case '\"q':\n              pt = '0\"q';\n              break;\n\n              // DECSCL\n            case '\"p':\n              pt = '61\"p';\n              break;\n\n              // DECSTBM\n            case 'r':\n              pt = '' + (this.scrollTop + 1) + ';' + (this.scrollBottom + 1) + 'r';\n              break;\n\n              // SGR\n            case 'm':\n              pt = '0m';\n              break;\n\n            default:\n              this.error('Unknown DCS Pt: %s.', pt);\n              pt = '';\n              break;\n            }\n\n            //- this.send('\\x1bP' + valid + '$r' + pt + '\\x1b\\\\');\n            break;\n\n            // Set Termcap/Terminfo Data (xterm, experimental).\n          case '+p':\n            break;\n\n          default:\n            this.error('Unknown DCS prefix: %s.', this.prefix);\n            break;\n          }\n\n          this.currentParam = 0;\n          this.prefix = '';\n          this.state = states.normal;\n        } else if (!this.currentParam) {\n          if (!this.prefix && ch !== '$' && ch !== '+') {\n            this.currentParam = ch;\n          } else if (this.prefix.length === 2) {\n            this.currentParam = ch;\n          } else {\n            this.prefix += ch;\n          }\n        } else {\n          this.currentParam += ch;\n        }\n        break;\n\n      case states.ignore:\n        // For PM and APC.\n        if (ch === '\\x1b' || ch === '\\x07') {\n          if (ch === '\\x1b') i++;\n          this.stateData = '';\n          this.state = states.normal;\n        } else {\n          if (!this.stateData) this.stateData = '';\n          this.stateData += ch;\n        }\n        break;\n      }\n    }\n\n    this.updateRange(this.y);\n    this.refresh(this.refreshStart, this.refreshEnd);\n  };\n\n  Terminal.prototype.writeln = function(data) {\n    // at times spaces appear in between escape chars and fixIndent fails us, so we fix it here\n    data = data.replace(/ /g, '&nbsp;');\n    // adding empty char before line break ensures that empty lines render properly\n    this.write(data + ' \\r\\n');\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-hypernal/node_modules/hypernal/lib/setgLevel.js":"'use strict';\n\nmodule.exports = function (Terminal) {\n  Terminal.prototype.setgLevel = function(g) {\n    this.glevel = g;\n    this.charset = this.charsets[g];\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-hypernal/node_modules/hypernal/lib/setgCharset.js":"'use strict';\n\nmodule.exports = function (Terminal) {\n  Terminal.prototype.setgCharset = function(g, charset) {\n    this.charsets[g] = charset;\n    if (this.glevel === g) {\n      this.charset = charset;\n    }\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-hypernal/node_modules/hypernal/lib/debug.js":"'use strict';\n\nmodule.exports = function (Terminal) {\n  Terminal.prototype.log = function() {\n    if (!Terminal.debug) return;\n    if (!window.console || !window.console.log) return;\n    var args = Array.prototype.slice.call(arguments);\n    window.console.log.apply(window.console, args);\n  };\n\n  Terminal.prototype.error = function() {\n    if (!Terminal.debug) return;\n    if (!window.console || !window.console.error) return;\n    var args = Array.prototype.slice.call(arguments);\n    window.console.error.apply(window.console, args);\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-hypernal/node_modules/hypernal/lib/stops.js":"'use strict';\n// ignore warnings regarging == and != (coersion makes things work here appearently)\n\nmodule.exports = function (Terminal) {\n  \n  Terminal.prototype.setupStops = function(i) {\n      if (i != null) {\n          if (!this.tabs[i]) {\n              i = this.prevStop(i);\n          }\n      } else {\n          this.tabs = {};\n          i = 0;\n      }\n\n      for (; i < this.cols; i += 8) {\n          this.tabs[i] = true;\n      }\n  };\n\n  Terminal.prototype.prevStop = function(x) {\n      if (x == null) x = this.x;\n      while (!this.tabs[--x] && x > 0);\n      return x >= this.cols ? this.cols - 1 : x < 0 ? 0 : x;\n  };\n\n  Terminal.prototype.nextStop = function(x) {\n      if (x == null) x = this.x;\n      while (!this.tabs[++x] && x < this.cols);\n      return x >= this.cols ? this.cols - 1 : x < 0 ? 0 : x;\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-hypernal/node_modules/hypernal/lib/erase.js":"'use strict';\n\nmodule.exports = function (Terminal) {\n  Terminal.prototype.eraseRight = function(x, y) {\n    var line = this.lines[this.ybase + y],\n      ch = [this.curAttr, ' ']; // xterm\n\n    for (; x < this.cols; x++) {\n      line[x] = ch;\n    }\n\n    this.updateRange(y);\n  };\n\n  Terminal.prototype.eraseLeft = function(x, y) {\n    var line = this.lines[this.ybase + y],\n      ch = [this.curAttr, ' ']; // xterm\n\n    x++;\n    while (x--) line[x] = ch;\n\n    this.updateRange(y);\n  };\n\n  Terminal.prototype.eraseLine = function(y) {\n    this.eraseRight(0, y);\n  };\n  \n  // CSI Ps J Erase in Display (ED).\n  // Ps = 0 -> Erase Below (default).\n  // Ps = 1 -> Erase Above.\n  // Ps = 2 -> Erase All.\n  // Ps = 3 -> Erase Saved Lines (xterm).\n  // CSI ? Ps J\n  // Erase in Display (DECSED).\n  // Ps = 0 -> Selective Erase Below (default).\n  // Ps = 1 -> Selective Erase Above.\n  // Ps = 2 -> Selective Erase All.\n  Terminal.prototype.eraseInDisplay = function(params) {\n      var j;\n      switch (params[0]) {\n      case 0:\n          this.eraseRight(this.x, this.y);\n          j = this.y + 1;\n          for (; j < this.rows; j++) {\n              this.eraseLine(j);\n          }\n          break;\n      case 1:\n          this.eraseLeft(this.x, this.y);\n          j = this.y;\n          while (j--) {\n              this.eraseLine(j);\n          }\n          break;\n      case 2:\n          j = this.rows;\n          while (j--) this.eraseLine(j);\n          break;\n      case 3:\n          ; // no saved lines\n          break;\n      }\n  };\n\n  // CSI Ps K Erase in Line (EL).\n  // Ps = 0 -> Erase to Right (default).\n  // Ps = 1 -> Erase to Left.\n  // Ps = 2 -> Erase All.\n  // CSI ? Ps K\n  // Erase in Line (DECSEL).\n  // Ps = 0 -> Selective Erase to Right (default).\n  // Ps = 1 -> Selective Erase to Left.\n  // Ps = 2 -> Selective Erase All.\n  Terminal.prototype.eraseInLine = function(params) {\n      switch (params[0]) {\n      case 0:\n          this.eraseRight(this.x, this.y);\n          break;\n      case 1:\n          this.eraseLeft(this.x, this.y);\n          break;\n      case 2:\n          this.eraseLine(this.y);\n          break;\n      }\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-hypernal/node_modules/hypernal/lib/blankLine.js":"'use strict';\n\nmodule.exports = function (Terminal) {\n  Terminal.prototype.blankLine = function(cur) {\n    var attr = cur ? this.curAttr : this.defAttr;\n\n    var ch = [attr, ' '],\n      line = [],\n      i = 0;\n\n    for (; i < this.cols; i++) {\n      line[i] = ch;\n    }\n\n    return line;\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-hypernal/node_modules/hypernal/lib/range.js":"'use strict';\n\nfunction addRowsOnDemand () {\n  while (this.y >= this.rows) {\n    this.lines.push(this.blankLine());\n    var div = document.createElement('div');\n    this.element.appendChild(div);\n    this.children.push(div);\n\n    this.rows++;\n  }\n}\n\nmodule.exports = function (Terminal) {\n  Terminal.prototype.updateRange = function(y) {\n    if (y < this.refreshStart) this.refreshStart = y;\n    if (y > this.refreshEnd) this.refreshEnd = y;\n    addRowsOnDemand.bind(this)();\n  };\n\n  Terminal.prototype.maxRange = function() {\n    this.refreshStart = 0;\n    this.refreshEnd = this.rows - 1;\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-hypernal/node_modules/hypernal/lib/util.js":"'use strict';\n\nmodule.exports = function (Terminal) {\n  Terminal.prototype.ch = function(cur) {\n    return cur ? [this.curAttr, ' '] : [this.defAttr, ' '];\n  };\n\n  Terminal.prototype.is = function(term) {\n    var name = this.termName || Terminal.termName;\n    return (name + '')\n      .indexOf(term) === 0;\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-hypernal/node_modules/hypernal/lib/esc/index.js":"'use strict';\nvar states = require('../states');\n\nmodule.exports = function (Terminal) {\n  // ESC D Index (IND is 0x84).\n  Terminal.prototype.index = function() {\n    this.y++;\n    if (this.y > this.scrollBottom) {\n      this.y--;\n      this.scroll();\n    }\n    this.state = states.normal;\n  };\n\n  // ESC M Reverse Index (RI is 0x8d).\n  Terminal.prototype.reverseIndex = function() {\n    var j;\n    this.y--;\n    if (this.y < this.scrollTop) {\n      this.y++;\n      // possibly move the code below to term.reverseScroll();\n      // test: echo -ne '\\e[1;1H\\e[44m\\eM\\e[0m'\n      // blankLine(true) is xterm/linux behavior\n      this.lines.splice(this.y + this.ybase, 0, this.blankLine(true));\n      j = this.rows - 1 - this.scrollBottom;\n      this.lines.splice(this.rows - 1 + this.ybase - j + 1, 1);\n      // this.maxRange();\n      this.updateRange(this.scrollTop);\n      this.updateRange(this.scrollBottom);\n    }\n    this.state = states.normal;\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-hypernal/node_modules/hypernal/lib/esc/reset.js":"'use strict';\n\nmodule.exports = function (Terminal) {\n\n  // ESC c Full Reset (RIS).\n  Terminal.prototype.reset = function() {\n    Terminal.call(this, this.cols, this.rows);\n    this.refresh(0, this.rows - 1);\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-hypernal/node_modules/hypernal/lib/esc/tabSet.js":"'use strict';\nvar states = require('../states');\n\nmodule.exports = function (Terminal) {\n\n  // ESC H Tab Set (HTS is 0x88).\n  Terminal.prototype.tabSet = function() {\n    this.tabs[this.x] = true;\n    this.state = states.normal;\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-hypernal/node_modules/hypernal/lib/csi/charAttributes.js":"'use strict';\n\nmodule.exports = function (Terminal) {\n\n  // CSI Pm m Character Attributes (SGR).\n  // Ps = 0 -> Normal (default).\n  // Ps = 1 -> Bold.\n  // Ps = 4 -> Underlined.\n  // Ps = 5 -> Blink (appears as Bold).\n  // Ps = 7 -> Inverse.\n  // Ps = 8 -> Invisible, i.e., hidden (VT300).\n  // Ps = 2 2 -> Normal (neither bold nor faint).\n  // Ps = 2 4 -> Not underlined.\n  // Ps = 2 5 -> Steady (not blinking).\n  // Ps = 2 7 -> Positive (not inverse).\n  // Ps = 2 8 -> Visible, i.e., not hidden (VT300).\n  // Ps = 3 0 -> Set foreground color to Black.\n  // Ps = 3 1 -> Set foreground color to Red.\n  // Ps = 3 2 -> Set foreground color to Green.\n  // Ps = 3 3 -> Set foreground color to Yellow.\n  // Ps = 3 4 -> Set foreground color to Blue.\n  // Ps = 3 5 -> Set foreground color to Magenta.\n  // Ps = 3 6 -> Set foreground color to Cyan.\n  // Ps = 3 7 -> Set foreground color to White.\n  // Ps = 3 9 -> Set foreground color to default (original).\n  // Ps = 4 0 -> Set background color to Black.\n  // Ps = 4 1 -> Set background color to Red.\n  // Ps = 4 2 -> Set background color to Green.\n  // Ps = 4 3 -> Set background color to Yellow.\n  // Ps = 4 4 -> Set background color to Blue.\n  // Ps = 4 5 -> Set background color to Magenta.\n  // Ps = 4 6 -> Set background color to Cyan.\n  // Ps = 4 7 -> Set background color to White.\n  // Ps = 4 9 -> Set background color to default (original).\n\n  // If 16-color support is compiled, the following apply. Assume\n  // that xterm's resources are set so that the ISO color codes are\n  // the first 8 of a set of 16. Then the aixterm colors are the\n  // bright versions of the ISO colors:\n  // Ps = 9 0 -> Set foreground color to Black.\n  // Ps = 9 1 -> Set foreground color to Red.\n  // Ps = 9 2 -> Set foreground color to Green.\n  // Ps = 9 3 -> Set foreground color to Yellow.\n  // Ps = 9 4 -> Set foreground color to Blue.\n  // Ps = 9 5 -> Set foreground color to Magenta.\n  // Ps = 9 6 -> Set foreground color to Cyan.\n  // Ps = 9 7 -> Set foreground color to White.\n  // Ps = 1 0 0 -> Set background color to Black.\n  // Ps = 1 0 1 -> Set background color to Red.\n  // Ps = 1 0 2 -> Set background color to Green.\n  // Ps = 1 0 3 -> Set background color to Yellow.\n  // Ps = 1 0 4 -> Set background color to Blue.\n  // Ps = 1 0 5 -> Set background color to Magenta.\n  // Ps = 1 0 6 -> Set background color to Cyan.\n  // Ps = 1 0 7 -> Set background color to White.\n\n  // If xterm is compiled with the 16-color support disabled, it\n  // supports the following, from rxvt:\n  // Ps = 1 0 0 -> Set foreground and background color to\n  // default.\n\n  // If 88- or 256-color support is compiled, the following apply.\n  // Ps = 3 8 ; 5 ; Ps -> Set foreground color to the second\n  // Ps.\n  // Ps = 4 8 ; 5 ; Ps -> Set background color to the second\n  // Ps.\n  Terminal.prototype.charAttributes = function(params) {\n    var l = params.length,\n      i = 0,\n      bg, fg, p;\n\n    for (; i < l; i++) {\n      p = params[i];\n      if (p >= 30 && p <= 37) {\n        // fg color 8\n        this.curAttr = (this.curAttr & ~ (0x1ff << 9)) | ((p - 30) << 9);\n      } else if (p >= 40 && p <= 47) {\n        // bg color 8\n        this.curAttr = (this.curAttr & ~0x1ff) | (p - 40);\n      } else if (p >= 90 && p <= 97) {\n        // fg color 16\n        p += 8;\n        this.curAttr = (this.curAttr & ~ (0x1ff << 9)) | ((p - 90) << 9);\n      } else if (p >= 100 && p <= 107) {\n        // bg color 16\n        p += 8;\n        this.curAttr = (this.curAttr & ~0x1ff) | (p - 100);\n      } else if (p === 0) {\n        // default\n        this.curAttr = this.defAttr;\n      } else if (p === 1) {\n        // bold text\n        this.curAttr = this.curAttr | (1 << 18);\n      } else if (p === 4) {\n        // underlined text\n        this.curAttr = this.curAttr | (2 << 18);\n      } else if (p === 7 || p === 27) {\n        // inverse and positive\n        // test with: echo -e '\\e[31m\\e[42mhello\\e[7mworld\\e[27mhi\\e[m'\n        if (p === 7) {\n          if ((this.curAttr >> 18) & 4) continue;\n          this.curAttr = this.curAttr | (4 << 18);\n        } else if (p === 27) {\n          if (~ (this.curAttr >> 18) & 4) continue;\n          this.curAttr = this.curAttr & ~ (4 << 18);\n        }\n\n        bg = this.curAttr & 0x1ff;\n        fg = (this.curAttr >> 9) & 0x1ff;\n\n        this.curAttr = (this.curAttr & ~0x3ffff) | ((bg << 9) | fg);\n      } else if (p === 22) {\n        // not bold\n        this.curAttr = this.curAttr & ~ (1 << 18);\n      } else if (p === 24) {\n        // not underlined\n        this.curAttr = this.curAttr & ~ (2 << 18);\n      } else if (p === 39) {\n        // reset fg\n        this.curAttr = this.curAttr & ~ (0x1ff << 9);\n        this.curAttr = this.curAttr | (((this.defAttr >> 9) & 0x1ff) << 9);\n      } else if (p === 49) {\n        // reset bg\n        this.curAttr = this.curAttr & ~0x1ff;\n        this.curAttr = this.curAttr | (this.defAttr & 0x1ff);\n      } else if (p === 38) {\n        // fg color 256\n        if (params[i + 1] !== 5) continue;\n        i += 2;\n        p = params[i] & 0xff;\n        // convert 88 colors to 256\n        // if (this.is('rxvt-unicode') && p < 88) p = p * 2.9090 | 0;\n        this.curAttr = (this.curAttr & ~ (0x1ff << 9)) | (p << 9);\n      } else if (p === 48) {\n        // bg color 256\n        if (params[i + 1] !== 5) continue;\n        i += 2;\n        p = params[i] & 0xff;\n        // convert 88 colors to 256\n        // if (this.is('rxvt-unicode') && p < 88) p = p * 2.9090 | 0;\n        this.curAttr = (this.curAttr & ~0x1ff) | p;\n      }\n    }\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-hypernal/node_modules/hypernal/lib/csi/insert-delete.js":"'use strict';\n\nmodule.exports = function (Terminal) {\n\n  // CSI Ps @\n  // Insert Ps (Blank) Character(s) (default = 1) (ICH).\n  Terminal.prototype.insertChars = function(params) {\n    var param, row, j, ch;\n\n    param = params[0];\n    if (param < 1) param = 1;\n\n    row = this.y + this.ybase;\n    j = this.x;\n    ch = [this.curAttr, ' ']; // xterm\n\n    while (param-- && j < this.cols) {\n      this.lines[row].splice(j++, 0, ch);\n      this.lines[row].pop();\n    }\n  };\n\n\n  // CSI Ps L\n  // Insert Ps Line(s) (default = 1) (IL).\n  Terminal.prototype.insertLines = function(params) {\n    var param, row, j;\n\n    param = params[0];\n    if (param < 1) param = 1;\n    row = this.y + this.ybase;\n\n    j = this.rows - 1 - this.scrollBottom;\n    j = this.rows - 1 + this.ybase - j + 1;\n\n    while (param--) {\n      // test: echo -e '\\e[44m\\e[1L\\e[0m'\n      // blankLine(true) - xterm/linux behavior\n      this.lines.splice(row, 0, this.blankLine(true));\n      this.lines.splice(j, 1);\n    }\n\n    // this.maxRange();\n    this.updateRange(this.y);\n    this.updateRange(this.scrollBottom);\n  };\n\n  // CSI Ps M\n  // Delete Ps Line(s) (default = 1) (DL).\n  Terminal.prototype.deleteLines = function(params) {\n    var param, row, j;\n\n    param = params[0];\n    if (param < 1) param = 1;\n    row = this.y + this.ybase;\n\n    j = this.rows - 1 - this.scrollBottom;\n    j = this.rows - 1 + this.ybase - j;\n\n    while (param--) {\n      // test: echo -e '\\e[44m\\e[1M\\e[0m'\n      // blankLine(true) - xterm/linux behavior\n      this.lines.splice(j + 1, 0, this.blankLine(true));\n      this.lines.splice(row, 1);\n    }\n\n    // this.maxRange();\n    this.updateRange(this.y);\n    this.updateRange(this.scrollBottom);\n  };\n\n  // CSI Ps P\n  // Delete Ps Character(s) (default = 1) (DCH).\n  Terminal.prototype.deleteChars = function(params) {\n    var param, row, ch;\n\n    param = params[0];\n    if (param < 1) param = 1;\n\n    row = this.y + this.ybase;\n    ch = [this.curAttr, ' ']; // xterm\n\n    while (param--) {\n      this.lines[row].splice(this.x, 1);\n      this.lines[row].push(ch);\n    }\n  };\n\n  // CSI Ps X\n  // Erase Ps Character(s) (default = 1) (ECH).\n  Terminal.prototype.eraseChars = function(params) {\n    var param, row, j, ch;\n\n    param = params[0];\n    if (param < 1) param = 1;\n\n    row = this.y + this.ybase;\n    j = this.x;\n    ch = [this.curAttr, ' ']; // xterm\n\n    while (param-- && j < this.cols) {\n      this.lines[row][j++] = ch;\n    }\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-hypernal/node_modules/hypernal/lib/csi/position.js":"'use strict';\n\nmodule.exports = function (Terminal) {\n  // CSI Pm ` Character Position Absolute\n  // [column] (default = [row,1]) (HPA).\n  Terminal.prototype.charPosAbsolute = function(params) {\n    var param = params[0];\n    if (param < 1) param = 1;\n    this.x = param - 1;\n    if (this.x >= this.cols) {\n      this.x = this.cols - 1;\n    }\n  };\n\n  // 141 61 a * HPR -\n  // Horizontal Position Relative\n  // reuse CSI Ps C ?\n  Terminal.prototype.HPositionRelative = function(params) {\n    var param = params[0];\n    if (param < 1) param = 1;\n    this.x += param;\n    if (this.x >= this.cols) {\n      this.x = this.cols - 1;\n    }\n  };\n  \n  // CSI Pm d\n  // Line Position Absolute [row] (default = [1,column]) (VPA).\n  Terminal.prototype.linePosAbsolute = function(params) {\n      var param = params[0];\n      if (param < 1) param = 1;\n      this.y = param - 1;\n      if (this.y >= this.rows) {\n          this.y = this.rows - 1;\n      }\n  };\n\n  // 145 65 e * VPR - Vertical Position Relative\n  // reuse CSI Ps B ?\n  Terminal.prototype.VPositionRelative = function(params) {\n      var param = params[0];\n      if (param < 1) param = 1;\n      this.y += param;\n      if (this.y >= this.rows) {\n          this.y = this.rows - 1;\n      }\n  };\n\n  // CSI Ps ; Ps f\n  // Horizontal and Vertical Position [row;column] (default =\n  // [1,1]) (HVP).\n  Terminal.prototype.HVPosition = function(params) {\n      if (params[0] < 1) params[0] = 1;\n      if (params[1] < 1) params[1] = 1;\n\n      this.y = params[0] - 1;\n      if (this.y >= this.rows) {\n          this.y = this.rows - 1;\n      }\n\n      this.x = params[1] - 1;\n      if (this.x >= this.cols) {\n          this.x = this.cols - 1;\n      }\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-hypernal/node_modules/hypernal/lib/csi/cursor.js":"'use strict';\n\nmodule.exports = function (Terminal) {\n  // CSI s\n  // Save cursor (ANSI.SYS).\n  Terminal.prototype.saveCursor = function(params) {\n    this.savedX = this.x;\n    this.savedY = this.y;\n  };\n\n  // CSI u\n  // Restore cursor (ANSI.SYS).\n  Terminal.prototype.restoreCursor = function(params) {\n    this.x = this.savedX || 0;\n    this.y = this.savedY || 0;\n  };\n\n  // CSI Ps A\n  // Cursor Up Ps Times (default = 1) (CUU).\n  Terminal.prototype.cursorUp = function(params) {\n      var param = params[0];\n      if (param < 1) param = 1;\n      this.y -= param;\n      if (this.y < 0) this.y = 0;\n  };\n\n  // CSI Ps B\n  // Cursor Down Ps Times (default = 1) (CUD).\n  Terminal.prototype.cursorDown = function(params) {\n      var param = params[0];\n      if (param < 1) param = 1;\n      this.y += param;\n      if (this.y >= this.rows) {\n          this.y = this.rows - 1;\n      }\n  };\n\n  // CSI Ps C\n  // Cursor Forward Ps Times (default = 1) (CUF).\n  Terminal.prototype.cursorForward = function(params) {\n      var param = params[0];\n      if (param < 1) param = 1;\n      this.x += param;\n      if (this.x >= this.cols) {\n          this.x = this.cols - 1;\n      }\n  };\n\n  // CSI Ps D\n  // Cursor Backward Ps Times (default = 1) (CUB).\n  Terminal.prototype.cursorBackward = function(params) {\n      var param = params[0];\n      if (param < 1) param = 1;\n      this.x -= param;\n      if (this.x < 0) this.x = 0;\n  };\n\n  // CSI Ps ; Ps H\n  // Cursor Position [row;column] (default = [1,1]) (CUP).\n  Terminal.prototype.cursorPos = function(params) {\n      var row, col;\n\n      row = params[0] - 1;\n\n      if (params.length >= 2) {\n          col = params[1] - 1;\n      } else {\n          col = 0;\n      }\n\n      if (row < 0) {\n          row = 0;\n      } else if (row >= this.rows) {\n          row = this.rows - 1;\n      }\n\n      if (col < 0) {\n          col = 0;\n      } else if (col >= this.cols) {\n          col = this.cols - 1;\n      }\n\n      this.x = col;\n      this.y = row;\n  };\n  \n  // CSI Ps E\n  // Cursor Next Line Ps Times (default = 1) (CNL).\n  // same as CSI Ps B ?\n  Terminal.prototype.cursorNextLine = function(params) {\n      var param = params[0];\n      if (param < 1) param = 1;\n      this.y += param;\n      if (this.y >= this.rows) {\n          this.y = this.rows - 1;\n      }\n      this.x = 0;\n  };\n\n  // CSI Ps F\n  // Cursor Preceding Line Ps Times (default = 1) (CNL).\n  // reuse CSI Ps A ?\n  Terminal.prototype.cursorPrecedingLine = function(params) {\n      var param = params[0];\n      if (param < 1) param = 1;\n      this.y -= param;\n      if (this.y < 0) this.y = 0;\n      this.x = 0;\n  };\n\n  // CSI Ps G\n  // Cursor Character Absolute [column] (default = [row,1]) (CHA).\n  Terminal.prototype.cursorCharAbsolute = function(params) {\n      var param = params[0];\n      if (param < 1) param = 1;\n      this.x = param - 1;\n  };\n\n  // CSI Ps I\n  // Cursor Forward Tabulation Ps tab stops (default = 1) (CHT).\n  Terminal.prototype.cursorForwardTab = function(params) {\n      var param = params[0] || 1;\n      while (param--) {\n          this.x = this.nextStop();\n      }\n  };\n\n  // CSI Ps Z Cursor Backward Tabulation Ps tab stops (default = 1) (CBT).\n  Terminal.prototype.cursorBackwardTab = function(params) {\n      var param = params[0] || 1;\n      while (param--) {\n          this.x = this.prevStop();\n      }\n  };\n\n};\n","/home/travis/build/npmtest/node-npmtest-hypernal/node_modules/hypernal/lib/csi/repeatPrecedingCharacter.js":"'use strict';\n\nmodule.exports = function (Terminal) {\n  // CSI Ps b Repeat the preceding graphic character Ps times (REP).\n  Terminal.prototype.repeatPrecedingCharacter = function(params) {\n    var param = params[0] || 1,\n      line = this.lines[this.ybase + this.y],\n      ch = line[this.x - 1] || [this.defAttr, ' '];\n\n    while (param--) line[this.x++] = ch;\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-hypernal/node_modules/hypernal/lib/csi/tabClear.js":"'use strict';\n\nmodule.exports = function (Terminal) {\n  // CSI Ps g Tab Clear (TBC).\n  // Ps = 0 -> Clear Current Column (default).\n  // Ps = 3 -> Clear All.\n  // Potentially:\n  // Ps = 2 -> Clear Stops on Line.\n  // http://vt100.net/annarbor/aaa-ug/section6.html\n  Terminal.prototype.tabClear = function(params) {\n    var param = params[0];\n    if (param <= 0) {\n      delete this.tabs[this.x];\n    } else if (param === 3) {\n      this.tabs = {};\n    }\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-hypernal/node_modules/hypernal/lib/csi/softReset.js":"'use strict';\n\nmodule.exports = function (Terminal) {\n  // CSI ! p Soft terminal reset (DECSTR).\n  // http://vt100.net/docs/vt220-rm/table4-10.html\n  Terminal.prototype.softReset = function(params) {\n    this.cursorHidden = false;\n    this.insertMode = false;\n    this.originMode = false;\n    this.wraparoundMode = false; // autowrap\n    this.applicationKeypad = false; // ?\n    this.scrollTop = 0;\n    this.scrollBottom = this.rows - 1;\n    this.curAttr = this.defAttr;\n    this.x = this.y = 0; // ?\n    this.charset = null;\n    this.glevel = 0; // ??\n    this.charsets = [null]; // ??\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-hypernal/node_modules/hypernal/lib/charsets.js":"'use strict';\n\nmodule.exports = function (Terminal) {\n\nTerminal.charsets = {};\n\n  // DEC Special Character and Line Drawing Set.\n  // http://vt100.net/docs/vt102-ug/table5-13.html\n  // A lot of curses apps use this if they see TERM=xterm.\n  // testing: echo -e '\\e(0a\\e(B'\n  // The xterm output sometimes seems to conflict with the\n  // reference above. xterm seems in line with the reference\n  // when running vttest however.\n  // The table below now uses xterm's output from vttest.\n  Terminal.charsets.SCLD = { // (0\n    '`': '\\u25c6', // '◆'\n    'a': '\\u2592', // '▒'\n    'b': '\\u0009', // '\\t'\n    'c': '\\u000c', // '\\f'\n    'd': '\\u000d', // '\\r'\n    'e': '\\u000a', // '\\n'\n    'f': '\\u00b0', // '°'\n    'g': '\\u00b1', // '±'\n    'h': '\\u2424', // '\\u2424' (NL)\n    'i': '\\u000b', // '\\v'\n    'j': '\\u2518', // '┘'\n    'k': '\\u2510', // '┐'\n    'l': '\\u250c', // '┌'\n    'm': '\\u2514', // '└'\n    'n': '\\u253c', // '┼'\n    'o': '\\u23ba', // '⎺'\n    'p': '\\u23bb', // '⎻'\n    'q': '\\u2500', // '─'\n    'r': '\\u23bc', // '⎼'\n    's': '\\u23bd', // '⎽'\n    't': '\\u251c', // '├'\n    'u': '\\u2524', // '┤'\n    'v': '\\u2534', // '┴'\n    'w': '\\u252c', // '┬'\n    'x': '\\u2502', // '│'\n    'y': '\\u2264', // '≤'\n    'z': '\\u2265', // '≥'\n    '{': '\\u03c0', // 'π'\n    '|': '\\u2260', // '≠'\n    '}': '\\u00a3', // '£'\n    '~': '\\u00b7' // '·'\n  };\n\n  Terminal.charsets.UK = null; // (A\n  Terminal.charsets.US = null; // (B (USASCII)\n  Terminal.charsets.Dutch = null; // (4\n  Terminal.charsets.Finnish = null; // (C or (5\n  Terminal.charsets.French = null; // (R\n  Terminal.charsets.FrenchCanadian = null; // (Q\n  Terminal.charsets.German = null; // (K\n  Terminal.charsets.Italian = null; // (Y\n  Terminal.charsets.NorwegianDanish = null; // (E or (6\n  Terminal.charsets.Spanish = null; // (Z\n  Terminal.charsets.Swedish = null; // (H or (7\n  Terminal.charsets.Swiss = null; // (=\n  Terminal.charsets.ISOLatin = null; // /A\n\n};\n","/home/travis/build/npmtest/node-npmtest-hypernal/node_modules/hypernal/lib/cursor.js":"'use strict';\n\nmodule.exports = function (Terminal) {\n  Terminal.prototype.cursorBlink = function() {\n    if (Terminal.focus !== this) return;\n    this.cursorState ^= 1;\n    this.refresh(this.y, this.y);\n  };\n\n  Terminal.prototype.showCursor = function() {\n    if (!this.cursorState) {\n      this.cursorState = 1;\n      this.refresh(this.y, this.y);\n    } else {\n      // Temporarily disabled:\n      // this.refreshBlink();\n    }\n  };\n\n  Terminal.prototype.startBlink = function() {\n    if (!Terminal.cursorBlink) return;\n    var self = this;\n    this._blinker = function() {\n      self.cursorBlink();\n    };\n    this._blink = setInterval(this._blinker, 500);\n  };\n\n  Terminal.prototype.refreshBlink = function() {\n    if (!Terminal.cursorBlink) return;\n    clearInterval(this._blink);\n    this._blink = setInterval(this._blinker, 500);\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-hypernal/node_modules/hypernal/lib/scrollDisp.js":"'use strict';\n\nmodule.exports = function (Terminal) {\n  Terminal.prototype.scrollDisp = function(disp) {\n    this.ydisp += disp;\n\n    if (this.ydisp > this.ybase) {\n      this.ydisp = this.ybase;\n    } else if (this.ydisp < 0) {\n      this.ydisp = 0;\n    }\n\n    this.refresh(0, this.rows - 1);\n  };\n};\n"}